{"version":3,"file":"static/js/779.42bf0821.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","helpers/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewTitle = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 15px;\n  cursor: pointer;\n  caret-color: transparent;\n  &:hover,\n  &:focus {\n    color: orangered;\n  }\n`;\n\nexport const UpdatedDate = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 15px;\n  font-size: 22px;\n`;\n\nexport const ReviewsItem = styled.li`\n  border: 1px solid #ccc;\n  border-radius: 25px;\n  padding: 0 20px;\n`;\n\nexport const ReviewsList = styled.ul`\n  width: 80%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ReviewsContent = styled.p`\n  text-indent: 20px;\n  text-align: justify;\n  font-size: 24px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'helpers/api';\nimport { FaUserCircle } from 'react-icons/fa';\nimport { AiOutlineFieldTime } from 'react-icons/ai';\nimport {\n  ReviewTitle,\n  ReviewsContent,\n  ReviewsItem,\n  ReviewsList,\n  UpdatedDate,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  function formattedDate(data) {\n    return new Date(data).toISOString().split('T')[0];\n  }\n  const { movieId } = useParams();\n  const [reviewsInfo, setReviewsInfo] = useState([]);\n  useEffect(() => {\n    fetchMovieReviews(movieId).then(reviews => setReviewsInfo(reviews));\n  }, [movieId]);\n\n  if (!reviewsInfo.length) {\n    return <p>Sorry, no information about reviews</p>;\n  } else {\n    return (\n      <ReviewsList>\n        {reviewsInfo.map(({ author, content, created_at, updated_at, id }) => {\n          const updatedDate = formattedDate(updated_at);\n          const createdDate = formattedDate(created_at);\n          return (\n            <ReviewsItem key={id}>\n              <ReviewTitle>\n                <FaUserCircle />\n                <h4>{author}</h4>\n              </ReviewTitle>\n              <ReviewsContent>\n                {content || 'no infornation about this review'}\n              </ReviewsContent>\n              <UpdatedDate>\n                <p>\n                  {updatedDate < createdDate\n                    ? `Updated at ${updatedDate}`\n                    : `Created at ${createdDate}`}\n                </p>\n                <AiOutlineFieldTime />\n              </UpdatedDate>\n            </ReviewsItem>\n          );\n        })}\n      </ReviewsList>\n    );\n  }\n};\nexport default Reviews;\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nconst KEY = 'd28f3e0fb4d925d2e7ab6a551bbf47ba';\nconst params = {\n  api_key: KEY,\n};\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchListOfFilms = async url => {\n  try {\n    const response = await axios\n      .get(url, { params })\n      .then(({ data: { results } }) => {\n        const normalizedResults = results.map(\n          ({ title, name, id, poster_path }) => {\n            return {\n              title: title ? title : name,\n              img: `https://www.themoviedb.org/t/p/original/${poster_path}`,\n              id,\n            };\n          }\n        );\n        return normalizedResults;\n      });\n\n    return response;\n  } catch ({ message }) {\n    toast.error('Oups! Something is going wrong... Please try later :(');\n    // console.error(message);\n  }\n};\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}`, { params })\n      .then(\n        ({\n          data: {\n            title,\n            name,\n            release_date,\n            genres,\n            overview,\n            vote_average,\n            id,\n            backdrop_path,\n          },\n        }) => {\n          const normalizedResults = {\n            title: title ? title : name,\n            img: backdrop_path\n              ? `https://www.themoviedb.org/t/p/original/${backdrop_path}`\n              : `https://otv.one/uploads/default_image/thumbnail.jpg`,\n            overview: overview ? overview : 'no information about overview',\n            scores: (vote_average * 10).toFixed(2),\n            data: new Date(release_date).getFullYear(),\n            genres: genres\n              ? genres.map(genre => genre.name).join(', ')\n              : 'no information about genres',\n            id,\n          };\n          return normalizedResults;\n        }\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error(\"We can't find information of the film\");\n  }\n};\nexport const fetchMovieCast = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}/credits`, { params })\n      .then(({ data: { cast } }) =>\n        cast.map(({ name, character, profile_path, id }) => {\n          return {\n            name,\n            character,\n            img: profile_path\n              ? `https://www.themoviedb.org/t/p/original/${profile_path}`\n              : `https://otv.one/uploads/default_image/thumbnail.jpg`,\n            id,\n          };\n        })\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error('Oups! Something is going wrong... Please try later :(');\n  }\n};\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}/reviews`, { params })\n      .then(({ data: { results } }) =>\n        results.map(({ author, content, created_at, updated_at, id }) => {\n          return {\n            author,\n            content,\n            created_at,\n            updated_at,\n            id,\n          };\n        })\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error('Oups! Something is going wrong... Please try later :(');\n  }\n};\n"],"names":["ReviewTitle","styled","UpdatedDate","ReviewsItem","ReviewsList","ReviewsContent","formattedDate","data","Date","toISOString","split","movieId","useParams","useState","reviewsInfo","setReviewsInfo","useEffect","fetchMovieReviews","then","reviews","length","map","author","content","created_at","updated_at","id","updatedDate","createdDate","params","api_key","axios","fetchListOfFilms","url","results","title","name","poster_path","img","response","message","toast","fetchMovieDetails","release_date","genres","overview","vote_average","backdrop_path","scores","toFixed","getFullYear","genre","join","fetchMovieCast","cast","character","profile_path"],"sourceRoot":""}