{"version":3,"file":"static/js/387.2069b221.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","helpers/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastsList = styled.ul`\n  display: inline-flex;\n  flex-direction: column;\n  max-width: 15%;\n  gap: 20px;\n`;\n\nexport const CastsItem = styled.li`\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 25px;\n  &:hover,\n  &:focus {\n    box-shadow: 0 0 15px 2px rgba(255, 153, 0, 0.7),\n      0 8px 10px -5px rgba(255, 153, 0, 0.5),\n      0 -8px 10px -5px rgba(255, 153, 0, 0.5),\n      10px 0 10px -5px rgba(255, 153, 0, 0.5),\n      -10px 0 10px -5px rgba(255, 153, 0, 0.5);\n  }\n`;\n\nexport const CastImage = styled.img`\n  width: 100%;\n  border-radius: 25px 25px 0 0;\n`;\n\nexport const CastActorsInfo = styled.div`\n  padding: 0 10px;\n  text-align: center;\n  & > p:first-of-type {\n    font-weight: 700;\n    font-size: 30px;\n  }\n  & > p:last-of-type {\n    font-size: 20px;\n  }\n`;\n","import { fetchMovieCast } from 'helpers/api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastsList,\n  CastsItem,\n  CastImage,\n  CastActorsInfo,\n} from 'components/Cast/Cast.styled';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    fetchMovieCast(movieId).then(cast => {\n      setCastInfo(cast);\n    });\n  }, [movieId]);\n\n  if (!castInfo.length) {\n    return <p>Sorry, no information about cast</p>;\n  } else {\n    return (\n      <CastsList>\n        {castInfo.map(({ name, img, id, character }) => (\n          <CastsItem key={id}>\n            <CastImage src={img} alt={name} loading=\"lazy\" />\n            <CastActorsInfo>\n              <p>{name}</p>\n              <p>{character}</p>\n            </CastActorsInfo>\n          </CastsItem>\n        ))}\n      </CastsList>\n    );\n  }\n};\nexport default Cast;\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nconst KEY = 'd28f3e0fb4d925d2e7ab6a551bbf47ba';\nconst params = {\n  api_key: KEY,\n};\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchListOfFilms = async url => {\n  try {\n    const response = await axios\n      .get(url, { params })\n      .then(({ data: { results } }) => {\n        const normalizedResults = results.map(\n          ({ title, name, id, poster_path }) => {\n            return {\n              title: title ? title : name,\n              img: `https://www.themoviedb.org/t/p/original/${poster_path}`,\n              id,\n            };\n          }\n        );\n        return normalizedResults;\n      });\n\n    return response;\n  } catch ({ message }) {\n    toast.error('Oups! Something is going wrong... Please try later :(');\n    // console.error(message);\n  }\n};\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}`, { params })\n      .then(\n        ({\n          data: {\n            title,\n            name,\n            release_date,\n            genres,\n            overview,\n            vote_average,\n            id,\n            backdrop_path,\n          },\n        }) => {\n          const normalizedResults = {\n            title: title ? title : name,\n            img: backdrop_path\n              ? `https://www.themoviedb.org/t/p/original/${backdrop_path}`\n              : `https://otv.one/uploads/default_image/thumbnail.jpg`,\n            overview: overview ? overview : 'no information about overview',\n            scores: (vote_average * 10).toFixed(2),\n            data: new Date(release_date).getFullYear(),\n            genres: genres\n              ? genres.map(genre => genre.name).join(', ')\n              : 'no information about genres',\n            id,\n          };\n          return normalizedResults;\n        }\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error(\"We can't find information of the film\");\n  }\n};\nexport const fetchMovieCast = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}/credits`, { params })\n      .then(({ data: { cast } }) =>\n        cast.map(({ name, character, profile_path, id }) => {\n          return {\n            name,\n            character,\n            img: profile_path\n              ? `https://www.themoviedb.org/t/p/original/${profile_path}`\n              : `https://otv.one/uploads/default_image/thumbnail.jpg`,\n            id,\n          };\n        })\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error('Oups! Something is going wrong... Please try later :(');\n  }\n};\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}/reviews`, { params })\n      .then(({ data: { results } }) =>\n        results.map(({ author, content, created_at, updated_at, id }) => {\n          return {\n            author,\n            content,\n            created_at,\n            updated_at,\n            id,\n          };\n        })\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error('Oups! Something is going wrong... Please try later :(');\n  }\n};\n"],"names":["CastsList","styled","CastsItem","CastImage","CastActorsInfo","useState","castInfo","setCastInfo","movieId","useParams","useEffect","fetchMovieCast","then","cast","length","map","name","img","id","character","src","alt","loading","params","api_key","axios","fetchListOfFilms","url","data","results","title","poster_path","response","message","toast","fetchMovieDetails","release_date","genres","overview","vote_average","backdrop_path","scores","toFixed","Date","getFullYear","genre","join","profile_path","fetchMovieReviews","author","content","created_at","updated_at"],"sourceRoot":""}