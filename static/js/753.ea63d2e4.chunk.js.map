{"version":3,"file":"static/js/753.ea63d2e4.chunk.js","mappings":"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","sources":["components/ListOfFilms/ListOfFilms.jsx","components/ListOfFilms/ListOfFilms.styled.js","helpers/api.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { FcFilmReel } from 'react-icons/fc';\nimport {\n  StyledLink,\n  StyledList,\n} from 'components/ListOfFilms/ListOfFilms.styled';\nimport { useLocation } from 'react-router-dom';\n\nconst ListOfFilms = ({ arrayOfFilms }) => {\n  const location = useLocation();\n  return (\n    <StyledList>\n      {arrayOfFilms.map(({ id, title }) => (\n        <li key={id}>\n          <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n            <FcFilmReel /> {title}\n          </StyledLink>\n        </li>\n      ))}\n    </StyledList>\n  );\n};\nListOfFilms.propTypes = {\n  arrayOfFilms: PropTypes.arrayOf(\n    PropTypes.exact({\n      img: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ListOfFilms;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledList = styled.ul`\n  font-size: 24px;\n  line-height: 1.2;\n`;\n\nexport const StyledLink = styled(Link)`\n  &:focus,\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const AlternativeMessage = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n`;\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nconst KEY = 'd28f3e0fb4d925d2e7ab6a551bbf47ba';\nconst params = {\n  api_key: KEY,\n};\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchListOfFilms = async url => {\n  try {\n    const response = await axios\n      .get(url, { params })\n      .then(({ data: { results } }) => {\n        const normalizedResults = results.map(\n          ({ title, name, id, poster_path }) => {\n            return {\n              title: title ? title : name,\n              img: `https://www.themoviedb.org/t/p/original/${poster_path}`,\n              id,\n            };\n          }\n        );\n        return normalizedResults;\n      });\n\n    return response;\n  } catch ({ message }) {\n    toast.error('Oups! Something is going wrong... Please try later :(');\n    // console.error(message);\n  }\n};\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}`, { params })\n      .then(\n        ({\n          data: {\n            title,\n            name,\n            release_date,\n            genres,\n            overview,\n            vote_average,\n            id,\n            backdrop_path,\n          },\n        }) => {\n          const normalizedResults = {\n            title: title ? title : name,\n            img: backdrop_path\n              ? `https://www.themoviedb.org/t/p/original/${backdrop_path}`\n              : `https://otv.one/uploads/default_image/thumbnail.jpg`,\n            overview: overview ? overview : 'no information about overview',\n            scores: (vote_average * 10).toFixed(2),\n            data: new Date(release_date).getFullYear(),\n            genres: genres\n              ? genres.map(genre => genre.name).join(', ')\n              : 'no information about genres',\n            id,\n          };\n          return normalizedResults;\n        }\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error(\"We can't find information of the film\");\n  }\n};\nexport const fetchMovieCast = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}/credits`, { params })\n      .then(({ data: { cast } }) =>\n        cast.map(({ name, character, profile_path, id }) => {\n          return {\n            name,\n            character,\n            img: profile_path\n              ? `https://www.themoviedb.org/t/p/original/${profile_path}`\n              : `https://otv.one/uploads/default_image/thumbnail.jpg`,\n            id,\n          };\n        })\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error('Oups! Something is going wrong... Please try later :(');\n  }\n};\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios\n      .get(`/movie/${id}/reviews`, { params })\n      .then(({ data: { results } }) =>\n        results.map(({ author, content, created_at, updated_at, id }) => {\n          return {\n            author,\n            content,\n            created_at,\n            updated_at,\n            id,\n          };\n        })\n      );\n    return response;\n  } catch ({ message }) {\n    // console.error(message);\n    toast.error('Oups! Something is going wrong... Please try later :(');\n  }\n};\n","import styled from '@emotion/styled';\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n  margin-top: 20px;\n`;\nexport const FormLabel = styled.label`\n  margin-bottom: 10px;\n  font-weight: bold;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid gray;\n  width: 300px;\n  font-size: 16px;\n`;\nexport const FormButton = styled.button`\n  background-color: #008cba;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  cursor: pointer;\n  &:hover {\n    background-color: #006d87;\n  }\n`;\n\nexport const SearchInputField = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n`;\nexport const FilterInputField = styled.div`\n  display: flex;\n\n  gap: 10px;\n`;\n\nexport const InputsWrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Form,\n  FormLabel,\n  FormInput,\n  FormButton,\n  SearchInputField,\n  FilterInputField,\n  InputsWrap,\n} from 'components/SearchForm/SearchForm.styled';\nimport { useEffect, useState } from 'react';\n\nconst SearchForm = ({ onSearch, onFilter }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const onChange = ({ target: { name, value } }) => {\n    name === 'input'\n      ? setInputValue(value.trim())\n      : setFilterValue(value.trim());\n  };\n\n  useEffect(() => {\n    onFilter(filterValue);\n  }, [filterValue, onFilter]);\n  return (\n    <Form\n      onSubmit={e => {\n        onSearch(e);\n        setInputValue('');\n        setFilterValue('');\n      }}\n    >\n      <FormLabel htmlFor=\"text-input\">What are you looking for ?</FormLabel>\n      <InputsWrap>\n        <SearchInputField>\n          <FormInput\n            type=\"text\"\n            id=\"text-input\"\n            name=\"input\"\n            value={inputValue}\n            onChange={onChange}\n          />\n          <FormButton type=\"submit\">Search Movie</FormButton>\n        </SearchInputField>\n        <FilterInputField>\n          <FormInput\n            type=\"text\"\n            name=\"filter\"\n            value={filterValue}\n            onChange={onChange}\n          />\n          <FormButton type=\"submit\">Filter</FormButton>\n        </FilterInputField>\n      </InputsWrap>\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSearch: PropTypes.func,\n  onFilter: PropTypes.func,\n};\nexport default SearchForm;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { fetchListOfFilms } from 'helpers/api';\nimport ListOfFilms from 'components/ListOfFilms/ListOfFilms';\nimport { AlternativeMessage } from 'components/ListOfFilms/ListOfFilms.styled';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [filteredValue, setFilteredValue] = useState('');\n  const [filteredMovies, setFilteredMovies] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const onSearch = e => {\n    e.preventDefault();\n    setSearchParams({ query: e.target.input.value.trim().toLowerCase() });\n  };\n\n  const onFilter = filterValue => {\n    setFilteredValue(filterValue);\n  };\n  useEffect(() => {\n    if (query) {\n      fetchListOfFilms(`/search/movie?query=${query}`).then(response => {\n        if (!response.length) {\n          toast('We can not find the film');\n        }\n        setSearchedMovies(response);\n      });\n    }\n  }, [query]);\n\n  useEffect(() => {\n    if (searchedMovies.length) {\n      const filteredArrayOfMovies = searchedMovies.filter(({ title }) =>\n        title.toLowerCase().includes(filteredValue.toLowerCase())\n      );\n      setFilteredMovies(filteredArrayOfMovies);\n    } else {\n      setFilteredMovies([]);\n    }\n  }, [filteredValue, searchedMovies, searchedMovies.length]);\n\n  return (\n    <>\n      <SearchForm onSearch={onSearch} onFilter={onFilter} />\n      <ListOfFilms arrayOfFilms={filteredMovies} />\n      {!filteredMovies.length && (\n        <AlternativeMessage>\n          Search result will be displayed here\n        </AlternativeMessage>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["arrayOfFilms","location","useLocation","map","id","title","to","state","from","StyledList","styled","StyledLink","Link","AlternativeMessage","params","api_key","axios","fetchListOfFilms","url","then","data","results","name","poster_path","img","response","message","toast","fetchMovieDetails","release_date","genres","overview","vote_average","backdrop_path","scores","toFixed","Date","getFullYear","genre","join","fetchMovieCast","cast","character","profile_path","fetchMovieReviews","author","content","created_at","updated_at","Form","FormLabel","FormInput","FormButton","SearchInputField","FilterInputField","InputsWrap","onSearch","onFilter","useState","inputValue","setInputValue","filterValue","setFilterValue","onChange","target","value","trim","useEffect","onSubmit","e","htmlFor","type","searchedMovies","setSearchedMovies","filteredValue","setFilteredValue","filteredMovies","setFilteredMovies","useSearchParams","searchParams","setSearchParams","query","get","length","filteredArrayOfMovies","filter","toLowerCase","includes","preventDefault","input","ListOfFilms"],"sourceRoot":""}